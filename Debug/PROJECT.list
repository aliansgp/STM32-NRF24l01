
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d68  08003d68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d70  08003d70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c48  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c83  00000000  00000000  00028ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c8  00000000  00000000  0002b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221ea  00000000  00000000  0002b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aea2  00000000  00000000  0004da0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec50  00000000  00000000  000588ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001274fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002134  00000000  00000000  0012754c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cec 	.word	0x08003cec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003cec 	.word	0x08003cec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <DWT_Delay_Init+0x58>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <DWT_Delay_Init+0x58>)
 800057e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000582:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <DWT_Delay_Init+0x58>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <DWT_Delay_Init+0x58>)
 800058a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800058e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <DWT_Delay_Init+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <DWT_Delay_Init+0x5c>)
 8000596:	f023 0301 	bic.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <DWT_Delay_Init+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <DWT_Delay_Init+0x5c>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <DWT_Delay_Init+0x5c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ae:	bf00      	nop
    __ASM volatile ("NOP");
 80005b0:	bf00      	nop
    __ASM volatile ("NOP");
 80005b2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <DWT_Delay_Init+0x5c>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005bc:	2300      	movs	r3, #0
 80005be:	e000      	b.n	80005c2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005c0:	2301      	movs	r3, #1
    }
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000edf0 	.word	0xe000edf0
 80005d0:	e0001000 	.word	0xe0001000

080005d4 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <DWT_Delay_us+0x48>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80005e2:	f002 f92f 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <DWT_Delay_us+0x4c>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	0c9b      	lsrs	r3, r3, #18
 80005f0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80005fc:	bf00      	nop
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <DWT_Delay_us+0x48>)
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	1ad2      	subs	r2, r2, r3
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1acb      	subs	r3, r1, r3
 800060c:	429a      	cmp	r2, r3
 800060e:	d3f6      	bcc.n	80005fe <DWT_Delay_us+0x2a>
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	e0001000 	.word	0xe0001000
 8000620:	431bde83 	.word	0x431bde83

08000624 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <DWT_Delay_ms+0x44>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000632:	f002 f907 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0c      	ldr	r2, [pc, #48]	; (800066c <DWT_Delay_ms+0x48>)
 800063a:	fba2 2303 	umull	r2, r3, r2, r3
 800063e:	099b      	lsrs	r3, r3, #6
 8000640:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800064c:	bf00      	nop
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <DWT_Delay_ms+0x44>)
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1ad2      	subs	r2, r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f8      	bcc.n	800064e <DWT_Delay_ms+0x2a>
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	e0001000 	.word	0xe0001000
 800066c:	10624dd3 	.word	0x10624dd3

08000670 <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <LCD_DATA+0xc4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <LCD_DATA+0xc4>)
 800068a:	8891      	ldrh	r1, [r2, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc5a 	bl	8001f48 <HAL_GPIO_WritePin>
 8000694:	e007      	b.n	80006a6 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <LCD_DATA+0xc4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a26      	ldr	r2, [pc, #152]	; (8000734 <LCD_DATA+0xc4>)
 800069c:	8891      	ldrh	r1, [r2, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fc51 	bl	8001f48 <HAL_GPIO_WritePin>
    if(Data & 2)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <LCD_DATA+0xc4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <LCD_DATA+0xc4>)
 80006b6:	88d1      	ldrh	r1, [r2, #6]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fc44 	bl	8001f48 <HAL_GPIO_WritePin>
 80006c0:	e007      	b.n	80006d2 <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <LCD_DATA+0xc4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <LCD_DATA+0xc4>)
 80006c8:	88d1      	ldrh	r1, [r2, #6]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fc3b 	bl	8001f48 <HAL_GPIO_WritePin>
    if(Data & 4)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <LCD_DATA+0xc4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <LCD_DATA+0xc4>)
 80006e2:	8911      	ldrh	r1, [r2, #8]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fc2e 	bl	8001f48 <HAL_GPIO_WritePin>
 80006ec:	e007      	b.n	80006fe <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <LCD_DATA+0xc4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <LCD_DATA+0xc4>)
 80006f4:	8911      	ldrh	r1, [r2, #8]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fc25 	bl	8001f48 <HAL_GPIO_WritePin>
    if(Data & 8)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <LCD_DATA+0xc4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <LCD_DATA+0xc4>)
 800070e:	8951      	ldrh	r1, [r2, #10]
 8000710:	2201      	movs	r2, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fc18 	bl	8001f48 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8000718:	e007      	b.n	800072a <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LCD_DATA+0xc4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <LCD_DATA+0xc4>)
 8000720:	8951      	ldrh	r1, [r2, #10]
 8000722:	2200      	movs	r2, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fc0f 	bl	8001f48 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08003d10 	.word	0x08003d10

08000738 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <LCD_CMD+0x60>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <LCD_CMD+0x60>)
 8000748:	89d1      	ldrh	r1, [r2, #14]
 800074a:	2200      	movs	r2, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fbfb 	bl	8001f48 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff8b 	bl	8000670 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <LCD_CMD+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <LCD_CMD+0x60>)
 8000760:	8991      	ldrh	r1, [r2, #12]
 8000762:	2201      	movs	r2, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fbef 	bl	8001f48 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <LCD_CMD+0x60>)
 800076c:	8a1b      	ldrh	r3, [r3, #16]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff30 	bl	80005d4 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <LCD_CMD+0x60>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <LCD_CMD+0x60>)
 800077a:	8991      	ldrh	r1, [r2, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fbe2 	bl	8001f48 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <LCD_CMD+0x60>)
 8000786:	8a1b      	ldrh	r3, [r3, #16]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff23 	bl	80005d4 <DWT_Delay_us>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08003d10 	.word	0x08003d10

0800079c <LCD_Clear>:
void LCD_Clear()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ffc9 	bl	8000738 <LCD_CMD>
    LCD_CMD(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff ffc6 	bl	8000738 <LCD_CMD>
    DWT_Delay_us(70);
 80007ac:	2046      	movs	r0, #70	; 0x46
 80007ae:	f7ff ff11 	bl	80005d4 <DWT_Delay_us>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b084      	sub	sp, #16
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	460a      	mov	r2, r1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	4613      	mov	r3, r2
 80007c4:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d111      	bne.n	80007f0 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	337f      	adds	r3, #127	; 0x7f
 80007d0:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <LCD_CMD>
      LCD_CMD(Low4);
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffa4 	bl	8000738 <LCD_CMD>
    }
    if(r == 2)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d111      	bne.n	800081a <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	3b41      	subs	r3, #65	; 0x41
 80007fa:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	091b      	lsrs	r3, r3, #4
 8000800:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff93 	bl	8000738 <LCD_CMD>
      LCD_CMD(Low4);
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff8f 	bl	8000738 <LCD_CMD>
    }
    DWT_Delay_ms(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff02 	bl	8000624 <DWT_Delay_ms>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_Init>:
void LCD_Init()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 800083e:	f7ff fe99 	bl	8000574 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 8000842:	4b74      	ldr	r3, [pc, #464]	; (8000a14 <LCD_Init+0x1ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a74      	ldr	r2, [pc, #464]	; (8000a18 <LCD_Init+0x1f0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d10e      	bne.n	800086a <LCD_Init+0x42>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <LCD_Init+0x1f4>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a71      	ldr	r2, [pc, #452]	; (8000a1c <LCD_Init+0x1f4>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b6f      	ldr	r3, [pc, #444]	; (8000a1c <LCD_Init+0x1f4>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	e03a      	b.n	80008e0 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 800086a:	4b6a      	ldr	r3, [pc, #424]	; (8000a14 <LCD_Init+0x1ec>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a6c      	ldr	r2, [pc, #432]	; (8000a20 <LCD_Init+0x1f8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d10e      	bne.n	8000892 <LCD_Init+0x6a>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4b68      	ldr	r3, [pc, #416]	; (8000a1c <LCD_Init+0x1f4>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a67      	ldr	r2, [pc, #412]	; (8000a1c <LCD_Init+0x1f4>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b65      	ldr	r3, [pc, #404]	; (8000a1c <LCD_Init+0x1f4>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	e026      	b.n	80008e0 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 8000892:	4b60      	ldr	r3, [pc, #384]	; (8000a14 <LCD_Init+0x1ec>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a63      	ldr	r2, [pc, #396]	; (8000a24 <LCD_Init+0x1fc>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d10e      	bne.n	80008ba <LCD_Init+0x92>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b5e      	ldr	r3, [pc, #376]	; (8000a1c <LCD_Init+0x1f4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a5d      	ldr	r2, [pc, #372]	; (8000a1c <LCD_Init+0x1f4>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
 80008ac:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <LCD_Init+0x1f4>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	e012      	b.n	80008e0 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008ba:	4b56      	ldr	r3, [pc, #344]	; (8000a14 <LCD_Init+0x1ec>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a5a      	ldr	r2, [pc, #360]	; (8000a28 <LCD_Init+0x200>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d10d      	bne.n	80008e0 <LCD_Init+0xb8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <LCD_Init+0x1f4>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a53      	ldr	r2, [pc, #332]	; (8000a1c <LCD_Init+0x1f4>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <LCD_Init+0x1f4>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 80008e0:	4b4c      	ldr	r3, [pc, #304]	; (8000a14 <LCD_Init+0x1ec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a4b      	ldr	r2, [pc, #300]	; (8000a14 <LCD_Init+0x1ec>)
 80008e6:	8891      	ldrh	r1, [r2, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fb2c 	bl	8001f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 80008f0:	4b48      	ldr	r3, [pc, #288]	; (8000a14 <LCD_Init+0x1ec>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a47      	ldr	r2, [pc, #284]	; (8000a14 <LCD_Init+0x1ec>)
 80008f6:	88d1      	ldrh	r1, [r2, #6]
 80008f8:	2200      	movs	r2, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fb24 	bl	8001f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <LCD_Init+0x1ec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a43      	ldr	r2, [pc, #268]	; (8000a14 <LCD_Init+0x1ec>)
 8000906:	8911      	ldrh	r1, [r2, #8]
 8000908:	2200      	movs	r2, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fb1c 	bl	8001f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8000910:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <LCD_Init+0x1ec>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <LCD_Init+0x1ec>)
 8000916:	8951      	ldrh	r1, [r2, #10]
 8000918:	2200      	movs	r2, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fb14 	bl	8001f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000920:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <LCD_Init+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a3b      	ldr	r2, [pc, #236]	; (8000a14 <LCD_Init+0x1ec>)
 8000926:	89d1      	ldrh	r1, [r2, #14]
 8000928:	2200      	movs	r2, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fb0c 	bl	8001f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8000930:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <LCD_Init+0x1ec>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a37      	ldr	r2, [pc, #220]	; (8000a14 <LCD_Init+0x1ec>)
 8000936:	8991      	ldrh	r1, [r2, #12]
 8000938:	2200      	movs	r2, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fb04 	bl	8001f48 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <LCD_Init+0x1ec>)
 8000942:	889a      	ldrh	r2, [r3, #4]
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <LCD_Init+0x1ec>)
 8000946:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000948:	4313      	orrs	r3, r2
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <LCD_Init+0x1ec>)
 800094e:	891b      	ldrh	r3, [r3, #8]
 8000950:	4313      	orrs	r3, r2
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <LCD_Init+0x1ec>)
 8000956:	895b      	ldrh	r3, [r3, #10]
 8000958:	4313      	orrs	r3, r2
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <LCD_Init+0x1ec>)
 800095e:	89db      	ldrh	r3, [r3, #14]
 8000960:	4313      	orrs	r3, r2
 8000962:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <LCD_Init+0x1ec>)
 8000966:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000968:	4313      	orrs	r3, r2
 800096a:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800096c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <LCD_Init+0x1ec>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f107 0214 	add.w	r2, r7, #20
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f943 	bl	8001c10 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <LCD_Init+0x1ec>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <LCD_Init+0x1ec>)
 8000990:	89d1      	ldrh	r1, [r2, #14]
 8000992:	2200      	movs	r2, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fad7 	bl	8001f48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <LCD_Init+0x1ec>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <LCD_Init+0x1ec>)
 80009a0:	8991      	ldrh	r1, [r2, #12]
 80009a2:	2200      	movs	r2, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 facf 	bl	8001f48 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fe60 	bl	8000670 <LCD_DATA>
    DWT_Delay_ms(150);
 80009b0:	2096      	movs	r0, #150	; 0x96
 80009b2:	f7ff fe37 	bl	8000624 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f7ff febe 	bl	8000738 <LCD_CMD>
    DWT_Delay_ms(5);
 80009bc:	2005      	movs	r0, #5
 80009be:	f7ff fe31 	bl	8000624 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009c2:	2003      	movs	r0, #3
 80009c4:	f7ff feb8 	bl	8000738 <LCD_CMD>
    DWT_Delay_us(150);
 80009c8:	2096      	movs	r0, #150	; 0x96
 80009ca:	f7ff fe03 	bl	80005d4 <DWT_Delay_us>
    LCD_CMD(0x03);
 80009ce:	2003      	movs	r0, #3
 80009d0:	f7ff feb2 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f7ff feaf 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x02);
 80009da:	2002      	movs	r0, #2
 80009dc:	f7ff feac 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x08);
 80009e0:	2008      	movs	r0, #8
 80009e2:	f7ff fea9 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff fea6 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x0C);
 80009ec:	200c      	movs	r0, #12
 80009ee:	f7ff fea3 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fea0 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x06);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f7ff fe9d 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fe9a 	bl	8000738 <LCD_CMD>
    LCD_CMD(0x01);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fe97 	bl	8000738 <LCD_CMD>
}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08003d10 	.word	0x08003d10
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 030f 	and.w	r3, r3, #15
 8000a3c:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f023 030f 	bic.w	r3, r3, #15
 8000a44:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a24      	ldr	r2, [pc, #144]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a4c:	89d1      	ldrh	r1, [r2, #14]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fa79 	bl	8001f48 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	091b      	lsrs	r3, r3, #4
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe07 	bl	8000670 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a68:	8991      	ldrh	r1, [r2, #12]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fa6b 	bl	8001f48 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a74:	8a1b      	ldrh	r3, [r3, #16]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdac 	bl	80005d4 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a16      	ldr	r2, [pc, #88]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a82:	8991      	ldrh	r1, [r2, #12]
 8000a84:	2200      	movs	r2, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fa5e 	bl	8001f48 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <LCD_Write_Char+0xb0>)
 8000a8e:	8a1b      	ldrh	r3, [r3, #16]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd9f 	bl	80005d4 <DWT_Delay_us>

   LCD_DATA(Low4);
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fde9 	bl	8000670 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aa4:	8991      	ldrh	r1, [r2, #12]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fa4d 	bl	8001f48 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <LCD_Write_Char+0xb0>)
 8000ab0:	8a1b      	ldrh	r3, [r3, #16]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd8e 	bl	80005d4 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <LCD_Write_Char+0xb0>)
 8000abe:	8991      	ldrh	r1, [r2, #12]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fa40 	bl	8001f48 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <LCD_Write_Char+0xb0>)
 8000aca:	8a1b      	ldrh	r3, [r3, #16]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd81 	bl	80005d4 <DWT_Delay_us>
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08003d10 	.word	0x08003d10

08000ae0 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e009      	b.n	8000b02 <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff98 	bl	8000a2c <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1ef      	bne.n	8000aee <LCD_Write_String+0xe>
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <MX_ADC1_Init+0x9c>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <MX_ADC1_Init+0xa0>)
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b7a:	f000 fb97 	bl	80012ac <HAL_ADC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b84:	f000 f9d8 	bl	8000f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_ADC1_Init+0x98>)
 8000b9a:	f000 fd35 	bl	8001608 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ba4:	f000 f9c8 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000008c 	.word	0x2000008c
 8000bb4:	40012000 	.word	0x40012000
 8000bb8:	0f000001 	.word	0x0f000001

08000bbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_ADC_MspInit+0x7c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d127      	bne.n	8000c2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_ADC_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_ADC_MspInit+0x84>)
 8000c2a:	f000 fff1 	bl	8001c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012000 	.word	0x40012000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a41      	ldr	r2, [pc, #260]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a3a      	ldr	r2, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a33      	ldr	r2, [pc, #204]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a2c      	ldr	r2, [pc, #176]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2118      	movs	r1, #24
 8000cce:	4827      	ldr	r0, [pc, #156]	; (8000d6c <MX_GPIO_Init+0x128>)
 8000cd0:	f001 f93a 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cda:	4825      	ldr	r0, [pc, #148]	; (8000d70 <MX_GPIO_Init+0x12c>)
 8000cdc:	f001 f934 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RS_Pin|D4_Pin|D5_Pin
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000ce6:	4823      	ldr	r0, [pc, #140]	; (8000d74 <MX_GPIO_Init+0x130>)
 8000ce8:	f001 f92e 	bl	8001f48 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cec:	2301      	movs	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x128>)
 8000d02:	f000 ff85 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000d06:	2318      	movs	r3, #24
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MX_GPIO_Init+0x128>)
 8000d1e:	f000 ff77 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_GPIO_Init+0x12c>)
 8000d3c:	f000 ff68 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|D4_Pin|D5_Pin
 8000d40:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000d44:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_GPIO_Init+0x130>)
 8000d5a:	f000 ff59 	bl	8001c10 <HAL_GPIO_Init>

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40020400 	.word	0x40020400

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 fa24 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f872 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f7ff ff5e 	bl	8000c44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d88:	f000 f8dc 	bl	8000f44 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d8c:	f7ff fec4 	bl	8000b18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // LCD initialization
  LCD_Init();
 8000d90:	f7ff fd4a 	bl	8000828 <LCD_Init>
  LCD_Clear();
 8000d94:	f7ff fd02 	bl	800079c <LCD_Clear>
  LCD_Set_Cursor(1, 1);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff fd0b 	bl	80007b6 <LCD_Set_Cursor>
  LCD_Write_String(" ");
 8000da0:	4826      	ldr	r0, [pc, #152]	; (8000e3c <main+0xc4>)
 8000da2:	f7ff fe9d 	bl	8000ae0 <LCD_Write_String>

  //Part 1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);// CE = 1
 8000da6:	2201      	movs	r2, #1
 8000da8:	2108      	movs	r1, #8
 8000daa:	4825      	ldr	r0, [pc, #148]	; (8000e40 <main+0xc8>)
 8000dac:	f001 f8cc 	bl	8001f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);// CSN = 0
 8000db0:	2200      	movs	r2, #0
 8000db2:	2110      	movs	r1, #16
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <main+0xc8>)
 8000db6:	f001 f8c7 	bl	8001f48 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg_addr, 8, 100); // Config address = 00
 8000dba:	2364      	movs	r3, #100	; 0x64
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	4921      	ldr	r1, [pc, #132]	; (8000e44 <main+0xcc>)
 8000dc0:	4821      	ldr	r0, [pc, #132]	; (8000e48 <main+0xd0>)
 8000dc2:	f001 fdd4 	bl	800296e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &reg_status, 8, 100);
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	2208      	movs	r2, #8
 8000dca:	4920      	ldr	r1, [pc, #128]	; (8000e4c <main+0xd4>)
 8000dcc:	481e      	ldr	r0, [pc, #120]	; (8000e48 <main+0xd0>)
 8000dce:	f001 ff0a 	bl	8002be6 <HAL_SPI_Receive>
  HAL_SPI_Transmit(&hspi1, &dum, 8, 100); // dummy value
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	491e      	ldr	r1, [pc, #120]	; (8000e50 <main+0xd8>)
 8000dd8:	481b      	ldr	r0, [pc, #108]	; (8000e48 <main+0xd0>)
 8000dda:	f001 fdc8 	bl	800296e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &config, 8, 100);
 8000dde:	2364      	movs	r3, #100	; 0x64
 8000de0:	2208      	movs	r2, #8
 8000de2:	491c      	ldr	r1, [pc, #112]	; (8000e54 <main+0xdc>)
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <main+0xd0>)
 8000de6:	f001 fefe 	bl	8002be6 <HAL_SPI_Receive>
  sprintf(config_lcd, "%02X",config); // casting
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <main+0xdc>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4919      	ldr	r1, [pc, #100]	; (8000e58 <main+0xe0>)
 8000df2:	481a      	ldr	r0, [pc, #104]	; (8000e5c <main+0xe4>)
 8000df4:	f002 fb0c 	bl	8003410 <siprintf>
  LCD_Set_Cursor(2, 1);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fcdb 	bl	80007b6 <LCD_Set_Cursor>
  LCD_Write_String(config_lcd);
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <main+0xe4>)
 8000e02:	f7ff fe6d 	bl	8000ae0 <LCD_Write_String>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);// CE = 0
 8000e06:	2200      	movs	r2, #0
 8000e08:	2108      	movs	r1, #8
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <main+0xc8>)
 8000e0c:	f001 f89c 	bl	8001f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);// CSN = 1
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <main+0xc8>)
 8000e16:	f001 f897 	bl	8001f48 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//	  HAL_Delay(500);

	  //ADC
	  HAL_ADC_Start(&hadc1);
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <main+0xe8>)
 8000e1c:	f000 fa8a 	bl	8001334 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000e20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e24:	480e      	ldr	r0, [pc, #56]	; (8000e60 <main+0xe8>)
 8000e26:	f000 fb57 	bl	80014d8 <HAL_ADC_PollForConversion>
	  ADC_raw_value = HAL_ADC_GetValue(&hadc1);
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <main+0xe8>)
 8000e2c:	f000 fbdf 	bl	80015ee <HAL_ADC_GetValue>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <main+0xec>)
 8000e36:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8000e38:	e7ef      	b.n	8000e1a <main+0xa2>
 8000e3a:	bf00      	nop
 8000e3c:	08003d04 	.word	0x08003d04
 8000e40:	40020000 	.word	0x40020000
 8000e44:	200000d7 	.word	0x200000d7
 8000e48:	200000e4 	.word	0x200000e4
 8000e4c:	200000d6 	.word	0x200000d6
 8000e50:	200000d4 	.word	0x200000d4
 8000e54:	200000d5 	.word	0x200000d5
 8000e58:	08003d08 	.word	0x08003d08
 8000e5c:	200000d8 	.word	0x200000d8
 8000e60:	2000008c 	.word	0x2000008c
 8000e64:	200000e0 	.word	0x200000e0

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	2230      	movs	r2, #48	; 0x30
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fac2 	bl	8003400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <SystemClock_Config+0xc8>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <SystemClock_Config+0xc8>)
 8000e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <SystemClock_Config+0xc8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <SystemClock_Config+0xcc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <SystemClock_Config+0xcc>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <SystemClock_Config+0xcc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 f845 	bl	8001f7c <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef8:	f000 f81e 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2102      	movs	r1, #2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 faa7 	bl	800246c <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f24:	f000 f808 	bl	8000f38 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	; 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <MX_SPI1_Init+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f78:	2220      	movs	r2, #32
 8000f7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f90:	220a      	movs	r2, #10
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f96:	f001 fc61 	bl	800285c <HAL_SPI_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fa0:	f7ff ffca 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000e4 	.word	0x200000e4
 8000fac:	40013000 	.word	0x40013000

08000fb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_SPI_MspInit+0x84>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12b      	bne.n	800102a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_SPI_MspInit+0x88>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_SPI_MspInit+0x88>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_SPI_MspInit+0x88>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_SPI_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_SPI_MspInit+0x88>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_SPI_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800100a:	23e0      	movs	r3, #224	; 0xe0
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_SPI_MspInit+0x8c>)
 8001026:	f000 fdf3 	bl	8001c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40013000 	.word	0x40013000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_MspInit+0x4c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x4c>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f8c6 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f002 f94a 	bl	80033ac <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20020000 	.word	0x20020000
 8001144:	00000400 	.word	0x00000400
 8001148:	2000013c 	.word	0x2000013c
 800114c:	20000158 	.word	0x20000158

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f002 f909 	bl	80033b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff fde7 	bl	8000d78 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b8:	08003d78 	.word	0x08003d78
  ldr r2, =_sbss
 80011bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c0:	20000154 	.word	0x20000154

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_Init+0x40>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_Init+0x40>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x40>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 fcd9 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff ff20 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fce3 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 fcb9 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000140 	.word	0x20000140

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000140 	.word	0x20000140

080012ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e033      	b.n	800132a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fc76 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d118      	bne.n	800131c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f2:	f023 0302 	bic.w	r3, r3, #2
 80012f6:	f043 0202 	orr.w	r2, r3, #2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 faa4 	bl	800184c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
 800131a:	e001      	b.n	8001320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_Start+0x1a>
 800134a:	2302      	movs	r3, #2
 800134c:	e0b2      	b.n	80014b4 <HAL_ADC_Start+0x180>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d018      	beq.n	8001396 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001374:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <HAL_ADC_Start+0x18c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_ADC_Start+0x190>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9a      	lsrs	r2, r3, #18
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001388:	e002      	b.n	8001390 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b01      	subs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d17a      	bne.n	800149a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e2:	d106      	bne.n	80013f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f023 0206 	bic.w	r2, r3, #6
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_ADC_Start+0x194>)
 8001402:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800140c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2b00      	cmp	r3, #0
 8001418:	d12a      	bne.n	8001470 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <HAL_ADC_Start+0x198>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d015      	beq.n	8001450 <HAL_ADC_Start+0x11c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_ADC_Start+0x19c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d105      	bne.n	800143a <HAL_ADC_Start+0x106>
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_ADC_Start+0x194>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00a      	beq.n	8001450 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <HAL_ADC_Start+0x1a0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d136      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_ADC_Start+0x194>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	d130      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d129      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	e020      	b.n	80014b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_ADC_Start+0x198>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11b      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d114      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e00b      	b.n	80014b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f043 0210 	orr.w	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	40012300 	.word	0x40012300
 80014cc:	40012000 	.word	0x40012000
 80014d0:	40012100 	.word	0x40012100
 80014d4:	40012200 	.word	0x40012200

080014d8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f4:	d113      	bne.n	800151e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001504:	d10b      	bne.n	800151e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f043 0220 	orr.w	r2, r3, #32
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e063      	b.n	80015e6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800151e:	f7ff feb9 	bl	8001294 <HAL_GetTick>
 8001522:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001524:	e021      	b.n	800156a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d01d      	beq.n	800156a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <HAL_ADC_PollForConversion+0x6c>
 8001534:	f7ff feae 	bl	8001294 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d212      	bcs.n	800156a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b02      	cmp	r3, #2
 8001550:	d00b      	beq.n	800156a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f043 0204 	orr.w	r2, r3, #4
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e03d      	b.n	80015e6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b02      	cmp	r3, #2
 8001576:	d1d6      	bne.n	8001526 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0212 	mvn.w	r2, #18
 8001580:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d123      	bne.n	80015e4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d11f      	bne.n	80015e4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d111      	bne.n	80015e4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d105      	bne.n	80015e4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1c>
 8001620:	2302      	movs	r3, #2
 8001622:	e105      	b.n	8001830 <HAL_ADC_ConfigChannel+0x228>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b09      	cmp	r3, #9
 8001632:	d925      	bls.n	8001680 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68d9      	ldr	r1, [r3, #12]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	3b1e      	subs	r3, #30
 800164a:	2207      	movs	r2, #7
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43da      	mvns	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	400a      	ands	r2, r1
 8001658:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68d9      	ldr	r1, [r3, #12]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	4603      	mov	r3, r0
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4403      	add	r3, r0
 8001672:	3b1e      	subs	r3, #30
 8001674:	409a      	lsls	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	e022      	b.n	80016c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6919      	ldr	r1, [r3, #16]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	2207      	movs	r2, #7
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	400a      	ands	r2, r1
 80016a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6919      	ldr	r1, [r3, #16]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4403      	add	r3, r0
 80016bc:	409a      	lsls	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d824      	bhi.n	8001718 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b05      	subs	r3, #5
 80016e0:	221f      	movs	r2, #31
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	400a      	ands	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3b05      	subs	r3, #5
 800170a:	fa00 f203 	lsl.w	r2, r0, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
 8001716:	e04c      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d824      	bhi.n	800176a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	3b23      	subs	r3, #35	; 0x23
 8001732:	221f      	movs	r2, #31
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43da      	mvns	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	400a      	ands	r2, r1
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b23      	subs	r3, #35	; 0x23
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
 8001768:	e023      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b41      	subs	r3, #65	; 0x41
 800177c:	221f      	movs	r2, #31
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	400a      	ands	r2, r1
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b41      	subs	r3, #65	; 0x41
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_ADC_ConfigChannel+0x234>)
 80017b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a21      	ldr	r2, [pc, #132]	; (8001840 <HAL_ADC_ConfigChannel+0x238>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d109      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1cc>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d105      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_ADC_ConfigChannel+0x238>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d123      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x21e>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d003      	beq.n	80017ee <HAL_ADC_ConfigChannel+0x1e6>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b11      	cmp	r3, #17
 80017ec:	d11b      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d111      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_ADC_ConfigChannel+0x23c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_ADC_ConfigChannel+0x240>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9a      	lsrs	r2, r3, #18
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001818:	e002      	b.n	8001820 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3b01      	subs	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40012300 	.word	0x40012300
 8001840:	40012000 	.word	0x40012000
 8001844:	20000000 	.word	0x20000000
 8001848:	431bde83 	.word	0x431bde83

0800184c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001854:	4b79      	ldr	r3, [pc, #484]	; (8001a3c <ADC_Init+0x1f0>)
 8001856:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6899      	ldr	r1, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <ADC_Init+0x1f4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d022      	beq.n	800192a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	e00f      	b.n	800194a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001948:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0202 	bic.w	r2, r2, #2
 8001958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6899      	ldr	r1, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7e1b      	ldrb	r3, [r3, #24]
 8001964:	005a      	lsls	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01b      	beq.n	80019b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001986:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001996:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6859      	ldr	r1, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	3b01      	subs	r3, #1
 80019a4:	035a      	lsls	r2, r3, #13
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	e007      	b.n	80019c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	3b01      	subs	r3, #1
 80019dc:	051a      	lsls	r2, r3, #20
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a02:	025a      	lsls	r2, r3, #9
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6899      	ldr	r1, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	029a      	lsls	r2, r3, #10
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40012300 	.word	0x40012300
 8001a40:	0f000001 	.word	0x0f000001

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff47 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff5c 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffb0 	bl	8001b64 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e16b      	b.n	8001f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 815a 	bne.w	8001efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d005      	beq.n	8001c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d130      	bne.n	8001cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 0201 	and.w	r2, r3, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d017      	beq.n	8001d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d123      	bne.n	8001d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	69b9      	ldr	r1, [r7, #24]
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80b4 	beq.w	8001efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <HAL_GPIO_Init+0x30c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a5f      	ldr	r2, [pc, #380]	; (8001f1c <HAL_GPIO_Init+0x30c>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_GPIO_Init+0x30c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db2:	4a5b      	ldr	r2, [pc, #364]	; (8001f20 <HAL_GPIO_Init+0x310>)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_GPIO_Init+0x314>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02b      	beq.n	8001e36 <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <HAL_GPIO_Init+0x318>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d025      	beq.n	8001e32 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a50      	ldr	r2, [pc, #320]	; (8001f2c <HAL_GPIO_Init+0x31c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4f      	ldr	r2, [pc, #316]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x21a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <HAL_GPIO_Init+0x324>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x216>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <HAL_GPIO_Init+0x328>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <HAL_GPIO_Init+0x32c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x20e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_GPIO_Init+0x330>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x20a>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00e      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x310>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a32      	ldr	r2, [pc, #200]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae90 	bls.w	8001c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40021c00 	.word	0x40021c00
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e267      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d075      	beq.n	8002086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	4b85      	ldr	r3, [pc, #532]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d112      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb2:	4b82      	ldr	r3, [pc, #520]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	4b7e      	ldr	r3, [pc, #504]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d05b      	beq.n	8002084 <HAL_RCC_OscConfig+0x108>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d157      	bne.n	8002084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e242      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x74>
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0xb0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x98>
 8001ffa:	4b70      	ldr	r3, [pc, #448]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6f      	ldr	r2, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6c      	ldr	r2, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xb0>
 8002014:	4b69      	ldr	r3, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a68      	ldr	r2, [pc, #416]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a65      	ldr	r2, [pc, #404]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff f92e 	bl	8001294 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff f92a 	bl	8001294 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e207      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xc0>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff f91a 	bl	8001294 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff f916 	bl	8001294 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1f3      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0xe8>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d063      	beq.n	800215a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020aa:	4b44      	ldr	r3, [pc, #272]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x152>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1c7      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e03a      	b.n	800215a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCC_OscConfig+0x244>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7ff f8cf 	bl	8001294 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fa:	f7ff f8cb 	bl	8001294 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1a8      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_OscConfig+0x244>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f8ae 	bl	8001294 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff f8aa 	bl	8001294 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e187      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d036      	beq.n	80021d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x248>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7ff f88e 	bl	8001294 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff f88a 	bl	8001294 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e167      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_OscConfig+0x240>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x200>
 800219a:	e01b      	b.n	80021d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_OscConfig+0x248>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7ff f877 	bl	8001294 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	e00e      	b.n	80021c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7ff f873 	bl	8001294 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d907      	bls.n	80021c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e150      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	42470000 	.word	0x42470000
 80021c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b88      	ldr	r3, [pc, #544]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ea      	bne.n	80021aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8097 	beq.w	8002310 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b7d      	ldr	r3, [pc, #500]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a7c      	ldr	r2, [pc, #496]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x474>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b74      	ldr	r3, [pc, #464]	; (80023f0 <HAL_RCC_OscConfig+0x474>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a73      	ldr	r2, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x474>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7ff f833 	bl	8001294 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7ff f82f 	bl	8001294 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e10c      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x474>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x2ea>
 8002258:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	e01c      	b.n	80022a0 <HAL_RCC_OscConfig+0x324>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x30c>
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a5e      	ldr	r2, [pc, #376]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a5b      	ldr	r2, [pc, #364]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0x324>
 8002288:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a57      	ldr	r2, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	4b55      	ldr	r3, [pc, #340]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a54      	ldr	r2, [pc, #336]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800229a:	f023 0304 	bic.w	r3, r3, #4
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe fff4 	bl	8001294 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fff0 	bl	8001294 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0cb      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0ee      	beq.n	80022b0 <HAL_RCC_OscConfig+0x334>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7fe ffde 	bl	8001294 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe ffda 	bl	8001294 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0b5      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ee      	bne.n	80022dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4a38      	ldr	r2, [pc, #224]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800230a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80a1 	beq.w	800245c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d05c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d141      	bne.n	80023b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCC_OscConfig+0x478>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe ffae 	bl	8001294 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe ffaa 	bl	8001294 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e087      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b27      	ldr	r3, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	491b      	ldr	r1, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x478>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe ff83 	bl	8001294 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe ff7f 	bl	8001294 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e05c      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x416>
 80023b0:	e054      	b.n	800245c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_RCC_OscConfig+0x478>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff6c 	bl	8001294 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe ff68 	bl	8001294 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e045      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_OscConfig+0x470>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x444>
 80023de:	e03d      	b.n	800245c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e038      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x4ec>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d028      	beq.n	8002458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d121      	bne.n	8002458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d11a      	bne.n	8002458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002428:	4013      	ands	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800242e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002430:	4293      	cmp	r3, r2
 8002432:	d111      	bne.n	8002458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	3b01      	subs	r3, #1
 8002442:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800

0800246c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0cc      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b68      	ldr	r3, [pc, #416]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d90c      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0b8      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	494d      	ldr	r1, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d044      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d119      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e07f      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d003      	beq.n	800252a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002526:	2b03      	cmp	r3, #3
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06f      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e067      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b37      	ldr	r3, [pc, #220]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fe9a 	bl	8001294 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fe96 	bl	8001294 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e04f      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d20c      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e032      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4916      	ldr	r1, [pc, #88]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025f2:	f000 f821 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	490a      	ldr	r1, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fdfa 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023c00 	.word	0x40023c00
 8002628:	40023800 	.word	0x40023800
 800262c:	08003d24 	.word	0x08003d24
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800263c:	b094      	sub	sp, #80	; 0x50
 800263e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	647b      	str	r3, [r7, #68]	; 0x44
 8002644:	2300      	movs	r3, #0
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002648:	2300      	movs	r3, #0
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002650:	4b79      	ldr	r3, [pc, #484]	; (8002838 <HAL_RCC_GetSysClockFreq+0x200>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d00d      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x40>
 800265c:	2b08      	cmp	r3, #8
 800265e:	f200 80e1 	bhi.w	8002824 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x34>
 8002666:	2b04      	cmp	r3, #4
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x3a>
 800266a:	e0db      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b73      	ldr	r3, [pc, #460]	; (800283c <HAL_RCC_GetSysClockFreq+0x204>)
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002670:	e0db      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002672:	4b73      	ldr	r3, [pc, #460]	; (8002840 <HAL_RCC_GetSysClockFreq+0x208>)
 8002674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002676:	e0d8      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002678:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <HAL_RCC_GetSysClockFreq+0x200>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002682:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_GetSysClockFreq+0x200>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268e:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_GetSysClockFreq+0x200>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	2200      	movs	r2, #0
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
 8002698:	63fa      	str	r2, [r7, #60]	; 0x3c
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
 80026a2:	2300      	movs	r3, #0
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
 80026a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026aa:	4622      	mov	r2, r4
 80026ac:	462b      	mov	r3, r5
 80026ae:	f04f 0000 	mov.w	r0, #0
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	0159      	lsls	r1, r3, #5
 80026b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026bc:	0150      	lsls	r0, r2, #5
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4621      	mov	r1, r4
 80026c4:	1a51      	subs	r1, r2, r1
 80026c6:	6139      	str	r1, [r7, #16]
 80026c8:	4629      	mov	r1, r5
 80026ca:	eb63 0301 	sbc.w	r3, r3, r1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026dc:	4659      	mov	r1, fp
 80026de:	018b      	lsls	r3, r1, #6
 80026e0:	4651      	mov	r1, sl
 80026e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e6:	4651      	mov	r1, sl
 80026e8:	018a      	lsls	r2, r1, #6
 80026ea:	4651      	mov	r1, sl
 80026ec:	ebb2 0801 	subs.w	r8, r2, r1
 80026f0:	4659      	mov	r1, fp
 80026f2:	eb63 0901 	sbc.w	r9, r3, r1
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800270a:	4690      	mov	r8, r2
 800270c:	4699      	mov	r9, r3
 800270e:	4623      	mov	r3, r4
 8002710:	eb18 0303 	adds.w	r3, r8, r3
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	462b      	mov	r3, r5
 8002718:	eb49 0303 	adc.w	r3, r9, r3
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800272a:	4629      	mov	r1, r5
 800272c:	024b      	lsls	r3, r1, #9
 800272e:	4621      	mov	r1, r4
 8002730:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002734:	4621      	mov	r1, r4
 8002736:	024a      	lsls	r2, r1, #9
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273e:	2200      	movs	r2, #0
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
 8002742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002748:	f7fd fd92 	bl	8000270 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4613      	mov	r3, r2
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002754:	e058      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_RCC_GetSysClockFreq+0x200>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	2200      	movs	r2, #0
 800275e:	4618      	mov	r0, r3
 8002760:	4611      	mov	r1, r2
 8002762:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	0159      	lsls	r1, r3, #5
 800277e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002782:	0150      	lsls	r0, r2, #5
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4641      	mov	r1, r8
 800278a:	ebb2 0a01 	subs.w	sl, r2, r1
 800278e:	4649      	mov	r1, r9
 8002790:	eb63 0b01 	sbc.w	fp, r3, r1
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a8:	ebb2 040a 	subs.w	r4, r2, sl
 80027ac:	eb63 050b 	sbc.w	r5, r3, fp
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	00eb      	lsls	r3, r5, #3
 80027ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027be:	00e2      	lsls	r2, r4, #3
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	4643      	mov	r3, r8
 80027c6:	18e3      	adds	r3, r4, r3
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	464b      	mov	r3, r9
 80027cc:	eb45 0303 	adc.w	r3, r5, r3
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027de:	4629      	mov	r1, r5
 80027e0:	028b      	lsls	r3, r1, #10
 80027e2:	4621      	mov	r1, r4
 80027e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e8:	4621      	mov	r1, r4
 80027ea:	028a      	lsls	r2, r1, #10
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f2:	2200      	movs	r2, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	61fa      	str	r2, [r7, #28]
 80027f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027fc:	f7fd fd38 	bl	8000270 <__aeabi_uldivmod>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4613      	mov	r3, r2
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_GetSysClockFreq+0x200>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800281a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002822:	e002      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetSysClockFreq+0x204>)
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800282c:	4618      	mov	r0, r3
 800282e:	3750      	adds	r7, #80	; 0x50
 8002830:	46bd      	mov	sp, r7
 8002832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400
 8002840:	007a1200 	.word	0x007a1200

08002844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCC_GetHCLKFreq+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000

0800285c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07b      	b.n	8002966 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d009      	beq.n	8002894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
 8002886:	e005      	b.n	8002894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fb7e 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	ea42 0103 	orr.w	r1, r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0104 	and.w	r1, r3, #4
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f003 0210 	and.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b088      	sub	sp, #32
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_SPI_Transmit+0x22>
 800298c:	2302      	movs	r3, #2
 800298e:	e126      	b.n	8002bde <HAL_SPI_Transmit+0x270>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002998:	f7fe fc7c 	bl	8001294 <HAL_GetTick>
 800299c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029b2:	e10b      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Transmit+0x52>
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c4:	e102      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d10f      	bne.n	8002a2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d007      	beq.n	8002a4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a54:	d14b      	bne.n	8002aee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Transmit+0xf6>
 8002a5e:	8afb      	ldrh	r3, [r7, #22]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d13e      	bne.n	8002ae2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a88:	e02b      	b.n	8002ae2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d112      	bne.n	8002abe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	1c9a      	adds	r2, r3, #2
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	86da      	strh	r2, [r3, #54]	; 0x36
 8002abc:	e011      	b.n	8002ae2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002abe:	f7fe fbe9 	bl	8001294 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d803      	bhi.n	8002ad6 <HAL_SPI_Transmit+0x168>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x16e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ae0:	e074      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ce      	bne.n	8002a8a <HAL_SPI_Transmit+0x11c>
 8002aec:	e04c      	b.n	8002b88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_Transmit+0x18e>
 8002af6:	8afb      	ldrh	r3, [r7, #22]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d140      	bne.n	8002b7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b22:	e02c      	b.n	8002b7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d113      	bne.n	8002b5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b58:	e011      	b.n	8002b7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5a:	f7fe fb9b 	bl	8001294 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d803      	bhi.n	8002b72 <HAL_SPI_Transmit+0x204>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d102      	bne.n	8002b78 <HAL_SPI_Transmit+0x20a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b7c:	e026      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1cd      	bne.n	8002b24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fbcb 	bl	8003328 <SPI_EndRxTxTransaction>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e000      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002bca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c02:	d112      	bne.n	8002c2a <HAL_SPI_Receive+0x44>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10e      	bne.n	8002c2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f8f1 	bl	8002e08 <HAL_SPI_TransmitReceive>
 8002c26:	4603      	mov	r3, r0
 8002c28:	e0ea      	b.n	8002e00 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_SPI_Receive+0x52>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0e3      	b.n	8002e00 <HAL_SPI_Receive+0x21a>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c40:	f7fe fb28 	bl	8001294 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c56:	e0ca      	b.n	8002dee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_SPI_Receive+0x7e>
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c68:	e0c1      	b.n	8002dee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d007      	beq.n	8002cf0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d162      	bne.n	8002dbe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cf8:	e02e      	b.n	8002d58 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d115      	bne.n	8002d34 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f103 020c 	add.w	r2, r3, #12
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d32:	e011      	b.n	8002d58 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d34:	f7fe faae 	bl	8001294 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d803      	bhi.n	8002d4c <HAL_SPI_Receive+0x166>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Receive+0x16c>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d56:	e04a      	b.n	8002dee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cb      	bne.n	8002cfa <HAL_SPI_Receive+0x114>
 8002d62:	e031      	b.n	8002dc8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d113      	bne.n	8002d9a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	1c9a      	adds	r2, r3, #2
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d98:	e011      	b.n	8002dbe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9a:	f7fe fa7b 	bl	8001294 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d803      	bhi.n	8002db2 <HAL_SPI_Receive+0x1cc>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d102      	bne.n	8002db8 <HAL_SPI_Receive+0x1d2>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002dbc:	e017      	b.n	8002dee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1cd      	bne.n	8002d64 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fa45 	bl	800325c <SPI_EndRxTransaction>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
 8002dea:	e000      	b.n	8002dee <HAL_SPI_Receive+0x208>
  }

error :
 8002dec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e16:	2301      	movs	r3, #1
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x26>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e18a      	b.n	8003144 <HAL_SPI_TransmitReceive+0x33c>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e36:	f7fe fa2d 	bl	8001294 <HAL_GetTick>
 8002e3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d00f      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x70>
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5e:	d107      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x68>
 8002e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d003      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e76:	e15b      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x82>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x82>
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e90:	e14e      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d003      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	887a      	ldrh	r2, [r7, #2]
 8002ece:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d007      	beq.n	8002efa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	d178      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x10a>
 8002f0c:	8b7b      	ldrh	r3, [r7, #26]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d166      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f36:	e053      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d11b      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x176>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d016      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x176>
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d113      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d119      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x1b8>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d014      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fc0:	f7fe f968 	bl	8001294 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d807      	bhi.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d003      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fde:	e0a7      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1a6      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x130>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1a1      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x130>
 8002ff4:	e07c      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x1fc>
 8002ffe:	8b7b      	ldrh	r3, [r7, #26]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d16b      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800302a:	e057      	b.n	80030dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d11c      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x26c>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d017      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x26c>
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d114      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d119      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x2ae>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d014      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030b2:	2301      	movs	r3, #1
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030b6:	f7fe f8ed 	bl	8001294 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d803      	bhi.n	80030ce <HAL_SPI_TransmitReceive+0x2c6>
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d102      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x2cc>
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030da:	e029      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1a2      	bne.n	800302c <HAL_SPI_TransmitReceive+0x224>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d19d      	bne.n	800302c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f917 	bl	8003328 <SPI_EndRxTxTransaction>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800310c:	e010      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	e000      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800312e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003144:	4618      	mov	r0, r3
 8003146:	3730      	adds	r7, #48	; 0x30
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800315c:	f7fe f89a 	bl	8001294 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	4413      	add	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800316c:	f7fe f892 	bl	8001294 <HAL_GetTick>
 8003170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003172:	4b39      	ldr	r3, [pc, #228]	; (8003258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	0d1b      	lsrs	r3, r3, #20
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	e054      	b.n	800322e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d050      	beq.n	800322e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800318c:	f7fe f882 	bl	8001294 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d13d      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d111      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	d004      	beq.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d107      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d10f      	bne.n	800320a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e017      	b.n	800324e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3b01      	subs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	429a      	cmp	r2, r3
 800324a:	d19b      	bne.n	8003184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000

0800325c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003270:	d111      	bne.n	8003296 <SPI_EndRxTransaction+0x3a>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327a:	d004      	beq.n	8003286 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d107      	bne.n	8003296 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329e:	d12a      	bne.n	80032f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d012      	beq.n	80032d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ff49 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02d      	beq.n	800331c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e026      	b.n	800331e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2200      	movs	r2, #0
 80032d8:	2101      	movs	r1, #1
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff ff36 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01a      	beq.n	800331c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e013      	b.n	800331e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2101      	movs	r1, #1
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff ff23 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e000      	b.n	800331e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <SPI_EndRxTxTransaction+0x7c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <SPI_EndRxTxTransaction+0x80>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0d5b      	lsrs	r3, r3, #21
 8003340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003352:	d112      	bne.n	800337a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff fef4 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e00f      	b.n	800339a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3b01      	subs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d0f2      	beq.n	800337a <SPI_EndRxTxTransaction+0x52>
 8003394:	e000      	b.n	8003398 <SPI_EndRxTxTransaction+0x70>
        break;
 8003396:	bf00      	nop
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000
 80033a8:	165e9f81 	.word	0x165e9f81

080033ac <__errno>:
 80033ac:	4b01      	ldr	r3, [pc, #4]	; (80033b4 <__errno+0x8>)
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000000c 	.word	0x2000000c

080033b8 <__libc_init_array>:
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	4d0d      	ldr	r5, [pc, #52]	; (80033f0 <__libc_init_array+0x38>)
 80033bc:	4c0d      	ldr	r4, [pc, #52]	; (80033f4 <__libc_init_array+0x3c>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	2600      	movs	r6, #0
 80033c4:	42a6      	cmp	r6, r4
 80033c6:	d109      	bne.n	80033dc <__libc_init_array+0x24>
 80033c8:	4d0b      	ldr	r5, [pc, #44]	; (80033f8 <__libc_init_array+0x40>)
 80033ca:	4c0c      	ldr	r4, [pc, #48]	; (80033fc <__libc_init_array+0x44>)
 80033cc:	f000 fc8e 	bl	8003cec <_init>
 80033d0:	1b64      	subs	r4, r4, r5
 80033d2:	10a4      	asrs	r4, r4, #2
 80033d4:	2600      	movs	r6, #0
 80033d6:	42a6      	cmp	r6, r4
 80033d8:	d105      	bne.n	80033e6 <__libc_init_array+0x2e>
 80033da:	bd70      	pop	{r4, r5, r6, pc}
 80033dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e0:	4798      	blx	r3
 80033e2:	3601      	adds	r6, #1
 80033e4:	e7ee      	b.n	80033c4 <__libc_init_array+0xc>
 80033e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ea:	4798      	blx	r3
 80033ec:	3601      	adds	r6, #1
 80033ee:	e7f2      	b.n	80033d6 <__libc_init_array+0x1e>
 80033f0:	08003d70 	.word	0x08003d70
 80033f4:	08003d70 	.word	0x08003d70
 80033f8:	08003d70 	.word	0x08003d70
 80033fc:	08003d74 	.word	0x08003d74

08003400 <memset>:
 8003400:	4402      	add	r2, r0
 8003402:	4603      	mov	r3, r0
 8003404:	4293      	cmp	r3, r2
 8003406:	d100      	bne.n	800340a <memset+0xa>
 8003408:	4770      	bx	lr
 800340a:	f803 1b01 	strb.w	r1, [r3], #1
 800340e:	e7f9      	b.n	8003404 <memset+0x4>

08003410 <siprintf>:
 8003410:	b40e      	push	{r1, r2, r3}
 8003412:	b500      	push	{lr}
 8003414:	b09c      	sub	sp, #112	; 0x70
 8003416:	ab1d      	add	r3, sp, #116	; 0x74
 8003418:	9002      	str	r0, [sp, #8]
 800341a:	9006      	str	r0, [sp, #24]
 800341c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003420:	4809      	ldr	r0, [pc, #36]	; (8003448 <siprintf+0x38>)
 8003422:	9107      	str	r1, [sp, #28]
 8003424:	9104      	str	r1, [sp, #16]
 8003426:	4909      	ldr	r1, [pc, #36]	; (800344c <siprintf+0x3c>)
 8003428:	f853 2b04 	ldr.w	r2, [r3], #4
 800342c:	9105      	str	r1, [sp, #20]
 800342e:	6800      	ldr	r0, [r0, #0]
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	a902      	add	r1, sp, #8
 8003434:	f000 f868 	bl	8003508 <_svfiprintf_r>
 8003438:	9b02      	ldr	r3, [sp, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	b01c      	add	sp, #112	; 0x70
 8003440:	f85d eb04 	ldr.w	lr, [sp], #4
 8003444:	b003      	add	sp, #12
 8003446:	4770      	bx	lr
 8003448:	2000000c 	.word	0x2000000c
 800344c:	ffff0208 	.word	0xffff0208

08003450 <__ssputs_r>:
 8003450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003454:	688e      	ldr	r6, [r1, #8]
 8003456:	429e      	cmp	r6, r3
 8003458:	4682      	mov	sl, r0
 800345a:	460c      	mov	r4, r1
 800345c:	4690      	mov	r8, r2
 800345e:	461f      	mov	r7, r3
 8003460:	d838      	bhi.n	80034d4 <__ssputs_r+0x84>
 8003462:	898a      	ldrh	r2, [r1, #12]
 8003464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003468:	d032      	beq.n	80034d0 <__ssputs_r+0x80>
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	6909      	ldr	r1, [r1, #16]
 800346e:	eba5 0901 	sub.w	r9, r5, r1
 8003472:	6965      	ldr	r5, [r4, #20]
 8003474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800347c:	3301      	adds	r3, #1
 800347e:	444b      	add	r3, r9
 8003480:	106d      	asrs	r5, r5, #1
 8003482:	429d      	cmp	r5, r3
 8003484:	bf38      	it	cc
 8003486:	461d      	movcc	r5, r3
 8003488:	0553      	lsls	r3, r2, #21
 800348a:	d531      	bpl.n	80034f0 <__ssputs_r+0xa0>
 800348c:	4629      	mov	r1, r5
 800348e:	f000 fb63 	bl	8003b58 <_malloc_r>
 8003492:	4606      	mov	r6, r0
 8003494:	b950      	cbnz	r0, 80034ac <__ssputs_r+0x5c>
 8003496:	230c      	movs	r3, #12
 8003498:	f8ca 3000 	str.w	r3, [sl]
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a2:	81a3      	strh	r3, [r4, #12]
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ac:	6921      	ldr	r1, [r4, #16]
 80034ae:	464a      	mov	r2, r9
 80034b0:	f000 fabe 	bl	8003a30 <memcpy>
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	6126      	str	r6, [r4, #16]
 80034c2:	6165      	str	r5, [r4, #20]
 80034c4:	444e      	add	r6, r9
 80034c6:	eba5 0509 	sub.w	r5, r5, r9
 80034ca:	6026      	str	r6, [r4, #0]
 80034cc:	60a5      	str	r5, [r4, #8]
 80034ce:	463e      	mov	r6, r7
 80034d0:	42be      	cmp	r6, r7
 80034d2:	d900      	bls.n	80034d6 <__ssputs_r+0x86>
 80034d4:	463e      	mov	r6, r7
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	4632      	mov	r2, r6
 80034da:	4641      	mov	r1, r8
 80034dc:	f000 fab6 	bl	8003a4c <memmove>
 80034e0:	68a3      	ldr	r3, [r4, #8]
 80034e2:	1b9b      	subs	r3, r3, r6
 80034e4:	60a3      	str	r3, [r4, #8]
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	4433      	add	r3, r6
 80034ea:	6023      	str	r3, [r4, #0]
 80034ec:	2000      	movs	r0, #0
 80034ee:	e7db      	b.n	80034a8 <__ssputs_r+0x58>
 80034f0:	462a      	mov	r2, r5
 80034f2:	f000 fba5 	bl	8003c40 <_realloc_r>
 80034f6:	4606      	mov	r6, r0
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d1e1      	bne.n	80034c0 <__ssputs_r+0x70>
 80034fc:	6921      	ldr	r1, [r4, #16]
 80034fe:	4650      	mov	r0, sl
 8003500:	f000 fabe 	bl	8003a80 <_free_r>
 8003504:	e7c7      	b.n	8003496 <__ssputs_r+0x46>
	...

08003508 <_svfiprintf_r>:
 8003508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350c:	4698      	mov	r8, r3
 800350e:	898b      	ldrh	r3, [r1, #12]
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	b09d      	sub	sp, #116	; 0x74
 8003514:	4607      	mov	r7, r0
 8003516:	460d      	mov	r5, r1
 8003518:	4614      	mov	r4, r2
 800351a:	d50e      	bpl.n	800353a <_svfiprintf_r+0x32>
 800351c:	690b      	ldr	r3, [r1, #16]
 800351e:	b963      	cbnz	r3, 800353a <_svfiprintf_r+0x32>
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	f000 fb19 	bl	8003b58 <_malloc_r>
 8003526:	6028      	str	r0, [r5, #0]
 8003528:	6128      	str	r0, [r5, #16]
 800352a:	b920      	cbnz	r0, 8003536 <_svfiprintf_r+0x2e>
 800352c:	230c      	movs	r3, #12
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	e0d1      	b.n	80036da <_svfiprintf_r+0x1d2>
 8003536:	2340      	movs	r3, #64	; 0x40
 8003538:	616b      	str	r3, [r5, #20]
 800353a:	2300      	movs	r3, #0
 800353c:	9309      	str	r3, [sp, #36]	; 0x24
 800353e:	2320      	movs	r3, #32
 8003540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003544:	f8cd 800c 	str.w	r8, [sp, #12]
 8003548:	2330      	movs	r3, #48	; 0x30
 800354a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80036f4 <_svfiprintf_r+0x1ec>
 800354e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003552:	f04f 0901 	mov.w	r9, #1
 8003556:	4623      	mov	r3, r4
 8003558:	469a      	mov	sl, r3
 800355a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800355e:	b10a      	cbz	r2, 8003564 <_svfiprintf_r+0x5c>
 8003560:	2a25      	cmp	r2, #37	; 0x25
 8003562:	d1f9      	bne.n	8003558 <_svfiprintf_r+0x50>
 8003564:	ebba 0b04 	subs.w	fp, sl, r4
 8003568:	d00b      	beq.n	8003582 <_svfiprintf_r+0x7a>
 800356a:	465b      	mov	r3, fp
 800356c:	4622      	mov	r2, r4
 800356e:	4629      	mov	r1, r5
 8003570:	4638      	mov	r0, r7
 8003572:	f7ff ff6d 	bl	8003450 <__ssputs_r>
 8003576:	3001      	adds	r0, #1
 8003578:	f000 80aa 	beq.w	80036d0 <_svfiprintf_r+0x1c8>
 800357c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800357e:	445a      	add	r2, fp
 8003580:	9209      	str	r2, [sp, #36]	; 0x24
 8003582:	f89a 3000 	ldrb.w	r3, [sl]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80a2 	beq.w	80036d0 <_svfiprintf_r+0x1c8>
 800358c:	2300      	movs	r3, #0
 800358e:	f04f 32ff 	mov.w	r2, #4294967295
 8003592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003596:	f10a 0a01 	add.w	sl, sl, #1
 800359a:	9304      	str	r3, [sp, #16]
 800359c:	9307      	str	r3, [sp, #28]
 800359e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035a2:	931a      	str	r3, [sp, #104]	; 0x68
 80035a4:	4654      	mov	r4, sl
 80035a6:	2205      	movs	r2, #5
 80035a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ac:	4851      	ldr	r0, [pc, #324]	; (80036f4 <_svfiprintf_r+0x1ec>)
 80035ae:	f7fc fe0f 	bl	80001d0 <memchr>
 80035b2:	9a04      	ldr	r2, [sp, #16]
 80035b4:	b9d8      	cbnz	r0, 80035ee <_svfiprintf_r+0xe6>
 80035b6:	06d0      	lsls	r0, r2, #27
 80035b8:	bf44      	itt	mi
 80035ba:	2320      	movmi	r3, #32
 80035bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035c0:	0711      	lsls	r1, r2, #28
 80035c2:	bf44      	itt	mi
 80035c4:	232b      	movmi	r3, #43	; 0x2b
 80035c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ca:	f89a 3000 	ldrb.w	r3, [sl]
 80035ce:	2b2a      	cmp	r3, #42	; 0x2a
 80035d0:	d015      	beq.n	80035fe <_svfiprintf_r+0xf6>
 80035d2:	9a07      	ldr	r2, [sp, #28]
 80035d4:	4654      	mov	r4, sl
 80035d6:	2000      	movs	r0, #0
 80035d8:	f04f 0c0a 	mov.w	ip, #10
 80035dc:	4621      	mov	r1, r4
 80035de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035e2:	3b30      	subs	r3, #48	; 0x30
 80035e4:	2b09      	cmp	r3, #9
 80035e6:	d94e      	bls.n	8003686 <_svfiprintf_r+0x17e>
 80035e8:	b1b0      	cbz	r0, 8003618 <_svfiprintf_r+0x110>
 80035ea:	9207      	str	r2, [sp, #28]
 80035ec:	e014      	b.n	8003618 <_svfiprintf_r+0x110>
 80035ee:	eba0 0308 	sub.w	r3, r0, r8
 80035f2:	fa09 f303 	lsl.w	r3, r9, r3
 80035f6:	4313      	orrs	r3, r2
 80035f8:	9304      	str	r3, [sp, #16]
 80035fa:	46a2      	mov	sl, r4
 80035fc:	e7d2      	b.n	80035a4 <_svfiprintf_r+0x9c>
 80035fe:	9b03      	ldr	r3, [sp, #12]
 8003600:	1d19      	adds	r1, r3, #4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	9103      	str	r1, [sp, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	bfbb      	ittet	lt
 800360a:	425b      	neglt	r3, r3
 800360c:	f042 0202 	orrlt.w	r2, r2, #2
 8003610:	9307      	strge	r3, [sp, #28]
 8003612:	9307      	strlt	r3, [sp, #28]
 8003614:	bfb8      	it	lt
 8003616:	9204      	strlt	r2, [sp, #16]
 8003618:	7823      	ldrb	r3, [r4, #0]
 800361a:	2b2e      	cmp	r3, #46	; 0x2e
 800361c:	d10c      	bne.n	8003638 <_svfiprintf_r+0x130>
 800361e:	7863      	ldrb	r3, [r4, #1]
 8003620:	2b2a      	cmp	r3, #42	; 0x2a
 8003622:	d135      	bne.n	8003690 <_svfiprintf_r+0x188>
 8003624:	9b03      	ldr	r3, [sp, #12]
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	9203      	str	r2, [sp, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	bfb8      	it	lt
 8003630:	f04f 33ff 	movlt.w	r3, #4294967295
 8003634:	3402      	adds	r4, #2
 8003636:	9305      	str	r3, [sp, #20]
 8003638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003704 <_svfiprintf_r+0x1fc>
 800363c:	7821      	ldrb	r1, [r4, #0]
 800363e:	2203      	movs	r2, #3
 8003640:	4650      	mov	r0, sl
 8003642:	f7fc fdc5 	bl	80001d0 <memchr>
 8003646:	b140      	cbz	r0, 800365a <_svfiprintf_r+0x152>
 8003648:	2340      	movs	r3, #64	; 0x40
 800364a:	eba0 000a 	sub.w	r0, r0, sl
 800364e:	fa03 f000 	lsl.w	r0, r3, r0
 8003652:	9b04      	ldr	r3, [sp, #16]
 8003654:	4303      	orrs	r3, r0
 8003656:	3401      	adds	r4, #1
 8003658:	9304      	str	r3, [sp, #16]
 800365a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365e:	4826      	ldr	r0, [pc, #152]	; (80036f8 <_svfiprintf_r+0x1f0>)
 8003660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003664:	2206      	movs	r2, #6
 8003666:	f7fc fdb3 	bl	80001d0 <memchr>
 800366a:	2800      	cmp	r0, #0
 800366c:	d038      	beq.n	80036e0 <_svfiprintf_r+0x1d8>
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <_svfiprintf_r+0x1f4>)
 8003670:	bb1b      	cbnz	r3, 80036ba <_svfiprintf_r+0x1b2>
 8003672:	9b03      	ldr	r3, [sp, #12]
 8003674:	3307      	adds	r3, #7
 8003676:	f023 0307 	bic.w	r3, r3, #7
 800367a:	3308      	adds	r3, #8
 800367c:	9303      	str	r3, [sp, #12]
 800367e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003680:	4433      	add	r3, r6
 8003682:	9309      	str	r3, [sp, #36]	; 0x24
 8003684:	e767      	b.n	8003556 <_svfiprintf_r+0x4e>
 8003686:	fb0c 3202 	mla	r2, ip, r2, r3
 800368a:	460c      	mov	r4, r1
 800368c:	2001      	movs	r0, #1
 800368e:	e7a5      	b.n	80035dc <_svfiprintf_r+0xd4>
 8003690:	2300      	movs	r3, #0
 8003692:	3401      	adds	r4, #1
 8003694:	9305      	str	r3, [sp, #20]
 8003696:	4619      	mov	r1, r3
 8003698:	f04f 0c0a 	mov.w	ip, #10
 800369c:	4620      	mov	r0, r4
 800369e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036a2:	3a30      	subs	r2, #48	; 0x30
 80036a4:	2a09      	cmp	r2, #9
 80036a6:	d903      	bls.n	80036b0 <_svfiprintf_r+0x1a8>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0c5      	beq.n	8003638 <_svfiprintf_r+0x130>
 80036ac:	9105      	str	r1, [sp, #20]
 80036ae:	e7c3      	b.n	8003638 <_svfiprintf_r+0x130>
 80036b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80036b4:	4604      	mov	r4, r0
 80036b6:	2301      	movs	r3, #1
 80036b8:	e7f0      	b.n	800369c <_svfiprintf_r+0x194>
 80036ba:	ab03      	add	r3, sp, #12
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	462a      	mov	r2, r5
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <_svfiprintf_r+0x1f8>)
 80036c2:	a904      	add	r1, sp, #16
 80036c4:	4638      	mov	r0, r7
 80036c6:	f3af 8000 	nop.w
 80036ca:	1c42      	adds	r2, r0, #1
 80036cc:	4606      	mov	r6, r0
 80036ce:	d1d6      	bne.n	800367e <_svfiprintf_r+0x176>
 80036d0:	89ab      	ldrh	r3, [r5, #12]
 80036d2:	065b      	lsls	r3, r3, #25
 80036d4:	f53f af2c 	bmi.w	8003530 <_svfiprintf_r+0x28>
 80036d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036da:	b01d      	add	sp, #116	; 0x74
 80036dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e0:	ab03      	add	r3, sp, #12
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	462a      	mov	r2, r5
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <_svfiprintf_r+0x1f8>)
 80036e8:	a904      	add	r1, sp, #16
 80036ea:	4638      	mov	r0, r7
 80036ec:	f000 f87a 	bl	80037e4 <_printf_i>
 80036f0:	e7eb      	b.n	80036ca <_svfiprintf_r+0x1c2>
 80036f2:	bf00      	nop
 80036f4:	08003d34 	.word	0x08003d34
 80036f8:	08003d3e 	.word	0x08003d3e
 80036fc:	00000000 	.word	0x00000000
 8003700:	08003451 	.word	0x08003451
 8003704:	08003d3a 	.word	0x08003d3a

08003708 <_printf_common>:
 8003708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800370c:	4616      	mov	r6, r2
 800370e:	4699      	mov	r9, r3
 8003710:	688a      	ldr	r2, [r1, #8]
 8003712:	690b      	ldr	r3, [r1, #16]
 8003714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003718:	4293      	cmp	r3, r2
 800371a:	bfb8      	it	lt
 800371c:	4613      	movlt	r3, r2
 800371e:	6033      	str	r3, [r6, #0]
 8003720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003724:	4607      	mov	r7, r0
 8003726:	460c      	mov	r4, r1
 8003728:	b10a      	cbz	r2, 800372e <_printf_common+0x26>
 800372a:	3301      	adds	r3, #1
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	0699      	lsls	r1, r3, #26
 8003732:	bf42      	ittt	mi
 8003734:	6833      	ldrmi	r3, [r6, #0]
 8003736:	3302      	addmi	r3, #2
 8003738:	6033      	strmi	r3, [r6, #0]
 800373a:	6825      	ldr	r5, [r4, #0]
 800373c:	f015 0506 	ands.w	r5, r5, #6
 8003740:	d106      	bne.n	8003750 <_printf_common+0x48>
 8003742:	f104 0a19 	add.w	sl, r4, #25
 8003746:	68e3      	ldr	r3, [r4, #12]
 8003748:	6832      	ldr	r2, [r6, #0]
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	42ab      	cmp	r3, r5
 800374e:	dc26      	bgt.n	800379e <_printf_common+0x96>
 8003750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003754:	1e13      	subs	r3, r2, #0
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	bf18      	it	ne
 800375a:	2301      	movne	r3, #1
 800375c:	0692      	lsls	r2, r2, #26
 800375e:	d42b      	bmi.n	80037b8 <_printf_common+0xb0>
 8003760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003764:	4649      	mov	r1, r9
 8003766:	4638      	mov	r0, r7
 8003768:	47c0      	blx	r8
 800376a:	3001      	adds	r0, #1
 800376c:	d01e      	beq.n	80037ac <_printf_common+0xa4>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	68e5      	ldr	r5, [r4, #12]
 8003772:	6832      	ldr	r2, [r6, #0]
 8003774:	f003 0306 	and.w	r3, r3, #6
 8003778:	2b04      	cmp	r3, #4
 800377a:	bf08      	it	eq
 800377c:	1aad      	subeq	r5, r5, r2
 800377e:	68a3      	ldr	r3, [r4, #8]
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	bf0c      	ite	eq
 8003784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003788:	2500      	movne	r5, #0
 800378a:	4293      	cmp	r3, r2
 800378c:	bfc4      	itt	gt
 800378e:	1a9b      	subgt	r3, r3, r2
 8003790:	18ed      	addgt	r5, r5, r3
 8003792:	2600      	movs	r6, #0
 8003794:	341a      	adds	r4, #26
 8003796:	42b5      	cmp	r5, r6
 8003798:	d11a      	bne.n	80037d0 <_printf_common+0xc8>
 800379a:	2000      	movs	r0, #0
 800379c:	e008      	b.n	80037b0 <_printf_common+0xa8>
 800379e:	2301      	movs	r3, #1
 80037a0:	4652      	mov	r2, sl
 80037a2:	4649      	mov	r1, r9
 80037a4:	4638      	mov	r0, r7
 80037a6:	47c0      	blx	r8
 80037a8:	3001      	adds	r0, #1
 80037aa:	d103      	bne.n	80037b4 <_printf_common+0xac>
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b4:	3501      	adds	r5, #1
 80037b6:	e7c6      	b.n	8003746 <_printf_common+0x3e>
 80037b8:	18e1      	adds	r1, r4, r3
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	2030      	movs	r0, #48	; 0x30
 80037be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037c2:	4422      	add	r2, r4
 80037c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037cc:	3302      	adds	r3, #2
 80037ce:	e7c7      	b.n	8003760 <_printf_common+0x58>
 80037d0:	2301      	movs	r3, #1
 80037d2:	4622      	mov	r2, r4
 80037d4:	4649      	mov	r1, r9
 80037d6:	4638      	mov	r0, r7
 80037d8:	47c0      	blx	r8
 80037da:	3001      	adds	r0, #1
 80037dc:	d0e6      	beq.n	80037ac <_printf_common+0xa4>
 80037de:	3601      	adds	r6, #1
 80037e0:	e7d9      	b.n	8003796 <_printf_common+0x8e>
	...

080037e4 <_printf_i>:
 80037e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	7e0f      	ldrb	r7, [r1, #24]
 80037ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037ec:	2f78      	cmp	r7, #120	; 0x78
 80037ee:	4691      	mov	r9, r2
 80037f0:	4680      	mov	r8, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	469a      	mov	sl, r3
 80037f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037fa:	d807      	bhi.n	800380c <_printf_i+0x28>
 80037fc:	2f62      	cmp	r7, #98	; 0x62
 80037fe:	d80a      	bhi.n	8003816 <_printf_i+0x32>
 8003800:	2f00      	cmp	r7, #0
 8003802:	f000 80d8 	beq.w	80039b6 <_printf_i+0x1d2>
 8003806:	2f58      	cmp	r7, #88	; 0x58
 8003808:	f000 80a3 	beq.w	8003952 <_printf_i+0x16e>
 800380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003814:	e03a      	b.n	800388c <_printf_i+0xa8>
 8003816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800381a:	2b15      	cmp	r3, #21
 800381c:	d8f6      	bhi.n	800380c <_printf_i+0x28>
 800381e:	a101      	add	r1, pc, #4	; (adr r1, 8003824 <_printf_i+0x40>)
 8003820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003824:	0800387d 	.word	0x0800387d
 8003828:	08003891 	.word	0x08003891
 800382c:	0800380d 	.word	0x0800380d
 8003830:	0800380d 	.word	0x0800380d
 8003834:	0800380d 	.word	0x0800380d
 8003838:	0800380d 	.word	0x0800380d
 800383c:	08003891 	.word	0x08003891
 8003840:	0800380d 	.word	0x0800380d
 8003844:	0800380d 	.word	0x0800380d
 8003848:	0800380d 	.word	0x0800380d
 800384c:	0800380d 	.word	0x0800380d
 8003850:	0800399d 	.word	0x0800399d
 8003854:	080038c1 	.word	0x080038c1
 8003858:	0800397f 	.word	0x0800397f
 800385c:	0800380d 	.word	0x0800380d
 8003860:	0800380d 	.word	0x0800380d
 8003864:	080039bf 	.word	0x080039bf
 8003868:	0800380d 	.word	0x0800380d
 800386c:	080038c1 	.word	0x080038c1
 8003870:	0800380d 	.word	0x0800380d
 8003874:	0800380d 	.word	0x0800380d
 8003878:	08003987 	.word	0x08003987
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	602a      	str	r2, [r5, #0]
 8003884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800388c:	2301      	movs	r3, #1
 800388e:	e0a3      	b.n	80039d8 <_printf_i+0x1f4>
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	6829      	ldr	r1, [r5, #0]
 8003894:	0606      	lsls	r6, r0, #24
 8003896:	f101 0304 	add.w	r3, r1, #4
 800389a:	d50a      	bpl.n	80038b2 <_printf_i+0xce>
 800389c:	680e      	ldr	r6, [r1, #0]
 800389e:	602b      	str	r3, [r5, #0]
 80038a0:	2e00      	cmp	r6, #0
 80038a2:	da03      	bge.n	80038ac <_printf_i+0xc8>
 80038a4:	232d      	movs	r3, #45	; 0x2d
 80038a6:	4276      	negs	r6, r6
 80038a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ac:	485e      	ldr	r0, [pc, #376]	; (8003a28 <_printf_i+0x244>)
 80038ae:	230a      	movs	r3, #10
 80038b0:	e019      	b.n	80038e6 <_printf_i+0x102>
 80038b2:	680e      	ldr	r6, [r1, #0]
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038ba:	bf18      	it	ne
 80038bc:	b236      	sxthne	r6, r6
 80038be:	e7ef      	b.n	80038a0 <_printf_i+0xbc>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	1d19      	adds	r1, r3, #4
 80038c6:	6029      	str	r1, [r5, #0]
 80038c8:	0601      	lsls	r1, r0, #24
 80038ca:	d501      	bpl.n	80038d0 <_printf_i+0xec>
 80038cc:	681e      	ldr	r6, [r3, #0]
 80038ce:	e002      	b.n	80038d6 <_printf_i+0xf2>
 80038d0:	0646      	lsls	r6, r0, #25
 80038d2:	d5fb      	bpl.n	80038cc <_printf_i+0xe8>
 80038d4:	881e      	ldrh	r6, [r3, #0]
 80038d6:	4854      	ldr	r0, [pc, #336]	; (8003a28 <_printf_i+0x244>)
 80038d8:	2f6f      	cmp	r7, #111	; 0x6f
 80038da:	bf0c      	ite	eq
 80038dc:	2308      	moveq	r3, #8
 80038de:	230a      	movne	r3, #10
 80038e0:	2100      	movs	r1, #0
 80038e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038e6:	6865      	ldr	r5, [r4, #4]
 80038e8:	60a5      	str	r5, [r4, #8]
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	bfa2      	ittt	ge
 80038ee:	6821      	ldrge	r1, [r4, #0]
 80038f0:	f021 0104 	bicge.w	r1, r1, #4
 80038f4:	6021      	strge	r1, [r4, #0]
 80038f6:	b90e      	cbnz	r6, 80038fc <_printf_i+0x118>
 80038f8:	2d00      	cmp	r5, #0
 80038fa:	d04d      	beq.n	8003998 <_printf_i+0x1b4>
 80038fc:	4615      	mov	r5, r2
 80038fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003902:	fb03 6711 	mls	r7, r3, r1, r6
 8003906:	5dc7      	ldrb	r7, [r0, r7]
 8003908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800390c:	4637      	mov	r7, r6
 800390e:	42bb      	cmp	r3, r7
 8003910:	460e      	mov	r6, r1
 8003912:	d9f4      	bls.n	80038fe <_printf_i+0x11a>
 8003914:	2b08      	cmp	r3, #8
 8003916:	d10b      	bne.n	8003930 <_printf_i+0x14c>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	07de      	lsls	r6, r3, #31
 800391c:	d508      	bpl.n	8003930 <_printf_i+0x14c>
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	6861      	ldr	r1, [r4, #4]
 8003922:	4299      	cmp	r1, r3
 8003924:	bfde      	ittt	le
 8003926:	2330      	movle	r3, #48	; 0x30
 8003928:	f805 3c01 	strble.w	r3, [r5, #-1]
 800392c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003930:	1b52      	subs	r2, r2, r5
 8003932:	6122      	str	r2, [r4, #16]
 8003934:	f8cd a000 	str.w	sl, [sp]
 8003938:	464b      	mov	r3, r9
 800393a:	aa03      	add	r2, sp, #12
 800393c:	4621      	mov	r1, r4
 800393e:	4640      	mov	r0, r8
 8003940:	f7ff fee2 	bl	8003708 <_printf_common>
 8003944:	3001      	adds	r0, #1
 8003946:	d14c      	bne.n	80039e2 <_printf_i+0x1fe>
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	b004      	add	sp, #16
 800394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003952:	4835      	ldr	r0, [pc, #212]	; (8003a28 <_printf_i+0x244>)
 8003954:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003958:	6829      	ldr	r1, [r5, #0]
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003960:	6029      	str	r1, [r5, #0]
 8003962:	061d      	lsls	r5, r3, #24
 8003964:	d514      	bpl.n	8003990 <_printf_i+0x1ac>
 8003966:	07df      	lsls	r7, r3, #31
 8003968:	bf44      	itt	mi
 800396a:	f043 0320 	orrmi.w	r3, r3, #32
 800396e:	6023      	strmi	r3, [r4, #0]
 8003970:	b91e      	cbnz	r6, 800397a <_printf_i+0x196>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f023 0320 	bic.w	r3, r3, #32
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	2310      	movs	r3, #16
 800397c:	e7b0      	b.n	80038e0 <_printf_i+0xfc>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	f043 0320 	orr.w	r3, r3, #32
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	2378      	movs	r3, #120	; 0x78
 8003988:	4828      	ldr	r0, [pc, #160]	; (8003a2c <_printf_i+0x248>)
 800398a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800398e:	e7e3      	b.n	8003958 <_printf_i+0x174>
 8003990:	0659      	lsls	r1, r3, #25
 8003992:	bf48      	it	mi
 8003994:	b2b6      	uxthmi	r6, r6
 8003996:	e7e6      	b.n	8003966 <_printf_i+0x182>
 8003998:	4615      	mov	r5, r2
 800399a:	e7bb      	b.n	8003914 <_printf_i+0x130>
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	6826      	ldr	r6, [r4, #0]
 80039a0:	6961      	ldr	r1, [r4, #20]
 80039a2:	1d18      	adds	r0, r3, #4
 80039a4:	6028      	str	r0, [r5, #0]
 80039a6:	0635      	lsls	r5, r6, #24
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	d501      	bpl.n	80039b0 <_printf_i+0x1cc>
 80039ac:	6019      	str	r1, [r3, #0]
 80039ae:	e002      	b.n	80039b6 <_printf_i+0x1d2>
 80039b0:	0670      	lsls	r0, r6, #25
 80039b2:	d5fb      	bpl.n	80039ac <_printf_i+0x1c8>
 80039b4:	8019      	strh	r1, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	6123      	str	r3, [r4, #16]
 80039ba:	4615      	mov	r5, r2
 80039bc:	e7ba      	b.n	8003934 <_printf_i+0x150>
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	1d1a      	adds	r2, r3, #4
 80039c2:	602a      	str	r2, [r5, #0]
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	2100      	movs	r1, #0
 80039ca:	4628      	mov	r0, r5
 80039cc:	f7fc fc00 	bl	80001d0 <memchr>
 80039d0:	b108      	cbz	r0, 80039d6 <_printf_i+0x1f2>
 80039d2:	1b40      	subs	r0, r0, r5
 80039d4:	6060      	str	r0, [r4, #4]
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	2300      	movs	r3, #0
 80039dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039e0:	e7a8      	b.n	8003934 <_printf_i+0x150>
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	462a      	mov	r2, r5
 80039e6:	4649      	mov	r1, r9
 80039e8:	4640      	mov	r0, r8
 80039ea:	47d0      	blx	sl
 80039ec:	3001      	adds	r0, #1
 80039ee:	d0ab      	beq.n	8003948 <_printf_i+0x164>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	079b      	lsls	r3, r3, #30
 80039f4:	d413      	bmi.n	8003a1e <_printf_i+0x23a>
 80039f6:	68e0      	ldr	r0, [r4, #12]
 80039f8:	9b03      	ldr	r3, [sp, #12]
 80039fa:	4298      	cmp	r0, r3
 80039fc:	bfb8      	it	lt
 80039fe:	4618      	movlt	r0, r3
 8003a00:	e7a4      	b.n	800394c <_printf_i+0x168>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4632      	mov	r2, r6
 8003a06:	4649      	mov	r1, r9
 8003a08:	4640      	mov	r0, r8
 8003a0a:	47d0      	blx	sl
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d09b      	beq.n	8003948 <_printf_i+0x164>
 8003a10:	3501      	adds	r5, #1
 8003a12:	68e3      	ldr	r3, [r4, #12]
 8003a14:	9903      	ldr	r1, [sp, #12]
 8003a16:	1a5b      	subs	r3, r3, r1
 8003a18:	42ab      	cmp	r3, r5
 8003a1a:	dcf2      	bgt.n	8003a02 <_printf_i+0x21e>
 8003a1c:	e7eb      	b.n	80039f6 <_printf_i+0x212>
 8003a1e:	2500      	movs	r5, #0
 8003a20:	f104 0619 	add.w	r6, r4, #25
 8003a24:	e7f5      	b.n	8003a12 <_printf_i+0x22e>
 8003a26:	bf00      	nop
 8003a28:	08003d45 	.word	0x08003d45
 8003a2c:	08003d56 	.word	0x08003d56

08003a30 <memcpy>:
 8003a30:	440a      	add	r2, r1
 8003a32:	4291      	cmp	r1, r2
 8003a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a38:	d100      	bne.n	8003a3c <memcpy+0xc>
 8003a3a:	4770      	bx	lr
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a46:	4291      	cmp	r1, r2
 8003a48:	d1f9      	bne.n	8003a3e <memcpy+0xe>
 8003a4a:	bd10      	pop	{r4, pc}

08003a4c <memmove>:
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	eb01 0402 	add.w	r4, r1, r2
 8003a54:	d902      	bls.n	8003a5c <memmove+0x10>
 8003a56:	4284      	cmp	r4, r0
 8003a58:	4623      	mov	r3, r4
 8003a5a:	d807      	bhi.n	8003a6c <memmove+0x20>
 8003a5c:	1e43      	subs	r3, r0, #1
 8003a5e:	42a1      	cmp	r1, r4
 8003a60:	d008      	beq.n	8003a74 <memmove+0x28>
 8003a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a6a:	e7f8      	b.n	8003a5e <memmove+0x12>
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4601      	mov	r1, r0
 8003a70:	428a      	cmp	r2, r1
 8003a72:	d100      	bne.n	8003a76 <memmove+0x2a>
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a7e:	e7f7      	b.n	8003a70 <memmove+0x24>

08003a80 <_free_r>:
 8003a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d044      	beq.n	8003b10 <_free_r+0x90>
 8003a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a8a:	9001      	str	r0, [sp, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a92:	bfb8      	it	lt
 8003a94:	18e4      	addlt	r4, r4, r3
 8003a96:	f000 f913 	bl	8003cc0 <__malloc_lock>
 8003a9a:	4a1e      	ldr	r2, [pc, #120]	; (8003b14 <_free_r+0x94>)
 8003a9c:	9801      	ldr	r0, [sp, #4]
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	b933      	cbnz	r3, 8003ab0 <_free_r+0x30>
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	6014      	str	r4, [r2, #0]
 8003aa6:	b003      	add	sp, #12
 8003aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aac:	f000 b90e 	b.w	8003ccc <__malloc_unlock>
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	d908      	bls.n	8003ac6 <_free_r+0x46>
 8003ab4:	6825      	ldr	r5, [r4, #0]
 8003ab6:	1961      	adds	r1, r4, r5
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	bf01      	itttt	eq
 8003abc:	6819      	ldreq	r1, [r3, #0]
 8003abe:	685b      	ldreq	r3, [r3, #4]
 8003ac0:	1949      	addeq	r1, r1, r5
 8003ac2:	6021      	streq	r1, [r4, #0]
 8003ac4:	e7ed      	b.n	8003aa2 <_free_r+0x22>
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	b10b      	cbz	r3, 8003ad0 <_free_r+0x50>
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d9fa      	bls.n	8003ac6 <_free_r+0x46>
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	1855      	adds	r5, r2, r1
 8003ad4:	42a5      	cmp	r5, r4
 8003ad6:	d10b      	bne.n	8003af0 <_free_r+0x70>
 8003ad8:	6824      	ldr	r4, [r4, #0]
 8003ada:	4421      	add	r1, r4
 8003adc:	1854      	adds	r4, r2, r1
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	d1e0      	bne.n	8003aa6 <_free_r+0x26>
 8003ae4:	681c      	ldr	r4, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	6053      	str	r3, [r2, #4]
 8003aea:	4421      	add	r1, r4
 8003aec:	6011      	str	r1, [r2, #0]
 8003aee:	e7da      	b.n	8003aa6 <_free_r+0x26>
 8003af0:	d902      	bls.n	8003af8 <_free_r+0x78>
 8003af2:	230c      	movs	r3, #12
 8003af4:	6003      	str	r3, [r0, #0]
 8003af6:	e7d6      	b.n	8003aa6 <_free_r+0x26>
 8003af8:	6825      	ldr	r5, [r4, #0]
 8003afa:	1961      	adds	r1, r4, r5
 8003afc:	428b      	cmp	r3, r1
 8003afe:	bf04      	itt	eq
 8003b00:	6819      	ldreq	r1, [r3, #0]
 8003b02:	685b      	ldreq	r3, [r3, #4]
 8003b04:	6063      	str	r3, [r4, #4]
 8003b06:	bf04      	itt	eq
 8003b08:	1949      	addeq	r1, r1, r5
 8003b0a:	6021      	streq	r1, [r4, #0]
 8003b0c:	6054      	str	r4, [r2, #4]
 8003b0e:	e7ca      	b.n	8003aa6 <_free_r+0x26>
 8003b10:	b003      	add	sp, #12
 8003b12:	bd30      	pop	{r4, r5, pc}
 8003b14:	20000144 	.word	0x20000144

08003b18 <sbrk_aligned>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	4e0e      	ldr	r6, [pc, #56]	; (8003b54 <sbrk_aligned+0x3c>)
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	6831      	ldr	r1, [r6, #0]
 8003b20:	4605      	mov	r5, r0
 8003b22:	b911      	cbnz	r1, 8003b2a <sbrk_aligned+0x12>
 8003b24:	f000 f8bc 	bl	8003ca0 <_sbrk_r>
 8003b28:	6030      	str	r0, [r6, #0]
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	f000 f8b7 	bl	8003ca0 <_sbrk_r>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	d00a      	beq.n	8003b4c <sbrk_aligned+0x34>
 8003b36:	1cc4      	adds	r4, r0, #3
 8003b38:	f024 0403 	bic.w	r4, r4, #3
 8003b3c:	42a0      	cmp	r0, r4
 8003b3e:	d007      	beq.n	8003b50 <sbrk_aligned+0x38>
 8003b40:	1a21      	subs	r1, r4, r0
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 f8ac 	bl	8003ca0 <_sbrk_r>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d101      	bne.n	8003b50 <sbrk_aligned+0x38>
 8003b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8003b50:	4620      	mov	r0, r4
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	20000148 	.word	0x20000148

08003b58 <_malloc_r>:
 8003b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5c:	1ccd      	adds	r5, r1, #3
 8003b5e:	f025 0503 	bic.w	r5, r5, #3
 8003b62:	3508      	adds	r5, #8
 8003b64:	2d0c      	cmp	r5, #12
 8003b66:	bf38      	it	cc
 8003b68:	250c      	movcc	r5, #12
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	db01      	blt.n	8003b74 <_malloc_r+0x1c>
 8003b70:	42a9      	cmp	r1, r5
 8003b72:	d905      	bls.n	8003b80 <_malloc_r+0x28>
 8003b74:	230c      	movs	r3, #12
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	2600      	movs	r6, #0
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b80:	4e2e      	ldr	r6, [pc, #184]	; (8003c3c <_malloc_r+0xe4>)
 8003b82:	f000 f89d 	bl	8003cc0 <__malloc_lock>
 8003b86:	6833      	ldr	r3, [r6, #0]
 8003b88:	461c      	mov	r4, r3
 8003b8a:	bb34      	cbnz	r4, 8003bda <_malloc_r+0x82>
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f7ff ffc2 	bl	8003b18 <sbrk_aligned>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	4604      	mov	r4, r0
 8003b98:	d14d      	bne.n	8003c36 <_malloc_r+0xde>
 8003b9a:	6834      	ldr	r4, [r6, #0]
 8003b9c:	4626      	mov	r6, r4
 8003b9e:	2e00      	cmp	r6, #0
 8003ba0:	d140      	bne.n	8003c24 <_malloc_r+0xcc>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	4631      	mov	r1, r6
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	eb04 0803 	add.w	r8, r4, r3
 8003bac:	f000 f878 	bl	8003ca0 <_sbrk_r>
 8003bb0:	4580      	cmp	r8, r0
 8003bb2:	d13a      	bne.n	8003c2a <_malloc_r+0xd2>
 8003bb4:	6821      	ldr	r1, [r4, #0]
 8003bb6:	3503      	adds	r5, #3
 8003bb8:	1a6d      	subs	r5, r5, r1
 8003bba:	f025 0503 	bic.w	r5, r5, #3
 8003bbe:	3508      	adds	r5, #8
 8003bc0:	2d0c      	cmp	r5, #12
 8003bc2:	bf38      	it	cc
 8003bc4:	250c      	movcc	r5, #12
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	4638      	mov	r0, r7
 8003bca:	f7ff ffa5 	bl	8003b18 <sbrk_aligned>
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d02b      	beq.n	8003c2a <_malloc_r+0xd2>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	442b      	add	r3, r5
 8003bd6:	6023      	str	r3, [r4, #0]
 8003bd8:	e00e      	b.n	8003bf8 <_malloc_r+0xa0>
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	1b52      	subs	r2, r2, r5
 8003bde:	d41e      	bmi.n	8003c1e <_malloc_r+0xc6>
 8003be0:	2a0b      	cmp	r2, #11
 8003be2:	d916      	bls.n	8003c12 <_malloc_r+0xba>
 8003be4:	1961      	adds	r1, r4, r5
 8003be6:	42a3      	cmp	r3, r4
 8003be8:	6025      	str	r5, [r4, #0]
 8003bea:	bf18      	it	ne
 8003bec:	6059      	strne	r1, [r3, #4]
 8003bee:	6863      	ldr	r3, [r4, #4]
 8003bf0:	bf08      	it	eq
 8003bf2:	6031      	streq	r1, [r6, #0]
 8003bf4:	5162      	str	r2, [r4, r5]
 8003bf6:	604b      	str	r3, [r1, #4]
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f104 060b 	add.w	r6, r4, #11
 8003bfe:	f000 f865 	bl	8003ccc <__malloc_unlock>
 8003c02:	f026 0607 	bic.w	r6, r6, #7
 8003c06:	1d23      	adds	r3, r4, #4
 8003c08:	1af2      	subs	r2, r6, r3
 8003c0a:	d0b6      	beq.n	8003b7a <_malloc_r+0x22>
 8003c0c:	1b9b      	subs	r3, r3, r6
 8003c0e:	50a3      	str	r3, [r4, r2]
 8003c10:	e7b3      	b.n	8003b7a <_malloc_r+0x22>
 8003c12:	6862      	ldr	r2, [r4, #4]
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	bf0c      	ite	eq
 8003c18:	6032      	streq	r2, [r6, #0]
 8003c1a:	605a      	strne	r2, [r3, #4]
 8003c1c:	e7ec      	b.n	8003bf8 <_malloc_r+0xa0>
 8003c1e:	4623      	mov	r3, r4
 8003c20:	6864      	ldr	r4, [r4, #4]
 8003c22:	e7b2      	b.n	8003b8a <_malloc_r+0x32>
 8003c24:	4634      	mov	r4, r6
 8003c26:	6876      	ldr	r6, [r6, #4]
 8003c28:	e7b9      	b.n	8003b9e <_malloc_r+0x46>
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f000 f84c 	bl	8003ccc <__malloc_unlock>
 8003c34:	e7a1      	b.n	8003b7a <_malloc_r+0x22>
 8003c36:	6025      	str	r5, [r4, #0]
 8003c38:	e7de      	b.n	8003bf8 <_malloc_r+0xa0>
 8003c3a:	bf00      	nop
 8003c3c:	20000144 	.word	0x20000144

08003c40 <_realloc_r>:
 8003c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c44:	4680      	mov	r8, r0
 8003c46:	4614      	mov	r4, r2
 8003c48:	460e      	mov	r6, r1
 8003c4a:	b921      	cbnz	r1, 8003c56 <_realloc_r+0x16>
 8003c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c50:	4611      	mov	r1, r2
 8003c52:	f7ff bf81 	b.w	8003b58 <_malloc_r>
 8003c56:	b92a      	cbnz	r2, 8003c64 <_realloc_r+0x24>
 8003c58:	f7ff ff12 	bl	8003a80 <_free_r>
 8003c5c:	4625      	mov	r5, r4
 8003c5e:	4628      	mov	r0, r5
 8003c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c64:	f000 f838 	bl	8003cd8 <_malloc_usable_size_r>
 8003c68:	4284      	cmp	r4, r0
 8003c6a:	4607      	mov	r7, r0
 8003c6c:	d802      	bhi.n	8003c74 <_realloc_r+0x34>
 8003c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c72:	d812      	bhi.n	8003c9a <_realloc_r+0x5a>
 8003c74:	4621      	mov	r1, r4
 8003c76:	4640      	mov	r0, r8
 8003c78:	f7ff ff6e 	bl	8003b58 <_malloc_r>
 8003c7c:	4605      	mov	r5, r0
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d0ed      	beq.n	8003c5e <_realloc_r+0x1e>
 8003c82:	42bc      	cmp	r4, r7
 8003c84:	4622      	mov	r2, r4
 8003c86:	4631      	mov	r1, r6
 8003c88:	bf28      	it	cs
 8003c8a:	463a      	movcs	r2, r7
 8003c8c:	f7ff fed0 	bl	8003a30 <memcpy>
 8003c90:	4631      	mov	r1, r6
 8003c92:	4640      	mov	r0, r8
 8003c94:	f7ff fef4 	bl	8003a80 <_free_r>
 8003c98:	e7e1      	b.n	8003c5e <_realloc_r+0x1e>
 8003c9a:	4635      	mov	r5, r6
 8003c9c:	e7df      	b.n	8003c5e <_realloc_r+0x1e>
	...

08003ca0 <_sbrk_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4d06      	ldr	r5, [pc, #24]	; (8003cbc <_sbrk_r+0x1c>)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	602b      	str	r3, [r5, #0]
 8003cac:	f7fd fa1a 	bl	80010e4 <_sbrk>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_sbrk_r+0x1a>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_sbrk_r+0x1a>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	2000014c 	.word	0x2000014c

08003cc0 <__malloc_lock>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <__malloc_lock+0x8>)
 8003cc2:	f000 b811 	b.w	8003ce8 <__retarget_lock_acquire_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	20000150 	.word	0x20000150

08003ccc <__malloc_unlock>:
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <__malloc_unlock+0x8>)
 8003cce:	f000 b80c 	b.w	8003cea <__retarget_lock_release_recursive>
 8003cd2:	bf00      	nop
 8003cd4:	20000150 	.word	0x20000150

08003cd8 <_malloc_usable_size_r>:
 8003cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cdc:	1f18      	subs	r0, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bfbc      	itt	lt
 8003ce2:	580b      	ldrlt	r3, [r1, r0]
 8003ce4:	18c0      	addlt	r0, r0, r3
 8003ce6:	4770      	bx	lr

08003ce8 <__retarget_lock_acquire_recursive>:
 8003ce8:	4770      	bx	lr

08003cea <__retarget_lock_release_recursive>:
 8003cea:	4770      	bx	lr

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
